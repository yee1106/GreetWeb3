/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SignInterface extends utils.Interface {
  contractName: "Sign";
  functions: {
    "_address()": FunctionFragment;
    "recoverWithSig(bytes32,bytes32,uint8)": FunctionFragment;
    "recoverWithSig2(bytes32,bytes32,bytes32,uint8)": FunctionFragment;
    "recoverWithSig3(bytes)": FunctionFragment;
    "recoverWithSig4(bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_address", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverWithSig",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverWithSig2",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverWithSig3",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverWithSig4",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "_address", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverWithSig2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverWithSig3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverWithSig4",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Sign extends BaseContract {
  contractName: "Sign";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _address(overrides?: CallOverrides): Promise<[string]>;

    recoverWithSig(
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverWithSig2(
      _hash: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverWithSig3(
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverWithSig4(
      _hash: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _address(overrides?: CallOverrides): Promise<string>;

  recoverWithSig(
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverWithSig2(
    _hash: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverWithSig3(
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverWithSig4(
    _hash: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _address(overrides?: CallOverrides): Promise<string>;

    recoverWithSig(
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverWithSig2(
      _hash: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverWithSig3(sig: BytesLike, overrides?: CallOverrides): Promise<void>;

    recoverWithSig4(
      _hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _address(overrides?: CallOverrides): Promise<BigNumber>;

    recoverWithSig(
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverWithSig2(
      _hash: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverWithSig3(
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverWithSig4(
      _hash: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverWithSig(
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverWithSig2(
      _hash: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverWithSig3(
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverWithSig4(
      _hash: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
