/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Text2, Text2Interface } from "../Text2";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address payable",
        name: "relayerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
    ],
    name: "MetaTransactionExecuted",
    type: "event",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "functionSignature",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "sigR",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "sigS",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "sigV",
        type: "uint8",
      },
    ],
    name: "executeMetaTransaction",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "setText",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "text",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051806040016040528060058152602001642a32bc3a1960d91b815250604051806040016040528060018152602001603160f81b81525081816040518060800160405280604f8152602001610b06604f913980519060200120828051906020012082805190602001203061008a6100f160201b60201c565b60408051602081019690965285019390935260608401919091526001600160a01b0316608083015260a082015260c00160408051601f1981840301815291905280516020909101206000555050600380546001600160a01b03191633179055506100f59050565b4690565b610a02806101046000396000f3fe60806040526004361061004a5760003560e01c80630c53c51c1461004f5780631f1bd692146100785780632d0335ab1461008d5780635d3a1f9d146100d1578063f851a440146100f3575b600080fd5b61006261005d366004610743565b61012b565b60405161006f91906108d1565b60405180910390f35b34801561008457600080fd5b506100626103a8565b34801561009957600080fd5b506100c36100a8366004610729565b6001600160a01b031660009081526001602052604090205490565b60405190815260200161006f565b3480156100dd57600080fd5b506100f16100ec3660046107cf565b610436565b005b3480156100ff57600080fd5b50600354610113906001600160a01b031681565b6040516001600160a01b03909116815260200161006f565b606060006101388661044d565b90506000356001600160e01b031990811690821614156101c55760405162461bcd60e51b815260206004820152603d60248201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060448201527f657865637574654d6574615472616e73616374696f6e206d6574686f6400000060648201526084015b60405180910390fd5b604080516060810182526001600160a01b038916600081815260016020908152908490205483528201529081018790526102028882888888610469565b6102585760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016101bc565b6001600160a01b03881660009081526001602081905260409091205461027d91610545565b6001600160a01b03891660009081526001602090815260408083209390935591519091829130916102b2918c918e9101610865565b60408051601f19818403018152908290526102cc91610849565b6000604051808303816000865af19150503d8060008114610309576040519150601f19603f3d011682016040523d82523d6000602084013e61030e565b606091505b5091509150816103605760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016101bc565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b6040516103939392919061089c565b60405180910390a19998505050505050505050565b600280546103b590610938565b80601f01602080910402602001604051908101604052809291908181526020018280546103e190610938565b801561042e5780601f106104035761010080835404028352916020019161042e565b820191906000526020600020905b81548152906001019060200180831161041157829003601f168201915b505050505081565b80516104499060029060208401906105fe565b5050565b600081516000141561046157506000919050565b506020015190565b600080600161047f61047a88610558565b6105d5565b6040805160008152602081018083529290925260ff861690820152606081018790526080810186905260a0016020604051602081039080840390855afa1580156104cd573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166105245760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016101bc565b866001600160a01b0316816001600160a01b03161491505095945050505050565b600061055182846108e4565b9392505050565b600060405180608001604052806043815260200161098a60439139805160209182012083518483015160408087015180519086012090516105b8950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b6000805460405161190160f01b60208201526022810191909152604281018390526062016105b8565b82805461060a90610938565b90600052602060002090601f01602090048101928261062c5760008555610672565b82601f1061064557805160ff1916838001178555610672565b82800160010185558215610672579182015b82811115610672578251825591602001919060010190610657565b5061067e929150610682565b5090565b5b8082111561067e5760008155600101610683565b600067ffffffffffffffff808411156106b2576106b2610973565b604051601f8501601f19908116603f011681019082821181831017156106da576106da610973565b816040528093508581528686860111156106f357600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461072457600080fd5b919050565b60006020828403121561073a578081fd5b6105518261070d565b600080600080600060a0868803121561075a578081fd5b6107638661070d565b9450602086013567ffffffffffffffff81111561077e578182fd5b8601601f8101881361078e578182fd5b61079d88823560208401610697565b9450506040860135925060608601359150608086013560ff811681146107c1578182fd5b809150509295509295909350565b6000602082840312156107e0578081fd5b813567ffffffffffffffff8111156107f6578182fd5b8201601f81018413610806578182fd5b61081584823560208401610697565b949350505050565b60008151808452610835816020860160208601610908565b601f01601f19169290920160200192915050565b6000825161085b818460208701610908565b9190910192915050565b60008351610877818460208801610908565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b6001600160a01b038481168252831660208201526060604082018190526000906108c89083018461081d565b95945050505050565b602081526000610551602083018461081d565b6000821982111561090357634e487b7160e01b81526011600452602481fd5b500190565b60005b8381101561092357818101518382015260200161090b565b83811115610932576000848401525b50505050565b600181811c9082168061094c57607f821691505b6020821081141561096d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a264697066735822122085af5903d84a468a8b04b40a8760e1f18a56fbc18be2edeb7f3053e0f1fe3cbd64736f6c63430008040033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429";

type Text2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Text2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Text2__factory extends ContractFactory {
  constructor(...args: Text2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Text2";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Text2> {
    return super.deploy(overrides || {}) as Promise<Text2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Text2 {
    return super.attach(address) as Text2;
  }
  connect(signer: Signer): Text2__factory {
    return super.connect(signer) as Text2__factory;
  }
  static readonly contractName: "Text2";
  public readonly contractName: "Text2";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Text2Interface {
    return new utils.Interface(_abi) as Text2Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Text2 {
    return new Contract(address, _abi, signerOrProvider) as Text2;
  }
}
